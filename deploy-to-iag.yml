name: Deploy IAM Key Rotation Service to IAG

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  SERVICE_NAME: aws-iam-key-rotation
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Unit Tests
      run: |
        python -m pytest tests/test_unit.py -v --cov=rotate_iam_keys --cov-report=xml --cov-report=html
        
    - name: Run Integration Tests
      run: |
        python -m pytest tests/test_integration.py -v
        
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  deploy-staging:
    name: Deploy to Staging IAG
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Deploy to Staging IAG
      env:
        IAG_HOST: ${{ secrets.IAG_STAGING_HOST }}
        IAG_SSH_KEY: ${{ secrets.IAG_STAGING_SSH_KEY }}
      run: |
        echo "Deploying to staging IAG at $IAG_HOST"
        echo "$IAG_SSH_KEY" > iag_key.pem
        chmod 600 iag_key.pem
        
        scp -i iag_key.pem -o StrictHostKeyChecking=no \
          rotate_iam_keys.py requirements.txt iag_config.json \
          iag-user@$IAG_HOST:/opt/iag/services/aws-iam-key-rotation/
        
        ssh -i iag_key.pem -o StrictHostKeyChecking=no iag-user@$IAG_HOST << 'EOF'
          cd /opt/iag/services/aws-iam-key-rotation/
          pip install -r requirements.txt
          iag service update python-script aws-iam-key-rotation
          iag service test python-script aws-iam-key-rotation --dry-run
        EOF
        
        rm -f iag_key.pem

  deploy-production:
    name: Deploy to Production IAG
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Deploy to Production IAG
      env:
        IAG_HOST: ${{ secrets.IAG_PRODUCTION_HOST }}
        IAG_SSH_KEY: ${{ secrets.IAG_PRODUCTION_SSH_KEY }}
      run: |
        echo "Deploying to production IAG at $IAG_HOST"
        echo "$IAG_SSH_KEY" > iag_key.pem
        chmod 600 iag_key.pem
        
        ssh -i iag_key.pem -o StrictHostKeyChecking=no iag-user@$IAG_HOST << 'EOF'
          cd /opt/iag/services/aws-iam-key-rotation/
          cp rotate_iam_keys.py rotate_iam_keys.py.backup.$(date +%Y%m%d_%H%M%S)
        EOF
        
        scp -i iag_key.pem -o StrictHostKeyChecking=no \
          rotate_iam_keys.py requirements.txt iag_config.json \
          iag-user@$IAG_HOST:/opt/iag/services/aws-iam-key-rotation/
        
        ssh -i iag_key.pem -o StrictHostKeyChecking=no iag-user@$IAG_HOST << 'EOF'
          cd /opt/iag/services/aws-iam-key-rotation/
          pip install -r requirements.txt
          iag service update python-script aws-iam-key-rotation
          iag service test python-script aws-iam-key-rotation --dry-run
          sudo systemctl reload iag-services
        EOF
        
        rm -f iag_key.pem
